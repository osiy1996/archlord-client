#ifndef	_AGPDFACTORS_H_
#define _AGPDFACTORS_H_

#include <ApBase/ApBase.h>

typedef enum _eAgpdFactorsType {
	AGPD_FACTORS_TYPE_NONE				= -1,
	AGPD_FACTORS_TYPE_RESULT,
	AGPD_FACTORS_TYPE_CHAR_STATUS,
	AGPD_FACTORS_TYPE_CHAR_TYPE,
	AGPD_FACTORS_TYPE_CHAR_POINT,
	AGPD_FACTORS_TYPE_CHAR_POINT_MAX,
	AGPD_FACTORS_TYPE_CHAR_POINT_RECOVERY_RATE,
	AGPD_FACTORS_TYPE_ATTRIBUTE,
	AGPD_FACTORS_TYPE_DAMAGE,
	AGPD_FACTORS_TYPE_DEFENSE,
	AGPD_FACTORS_TYPE_ATTACK,
	AGPD_FACTORS_TYPE_ITEM,
	AGPD_FACTORS_TYPE_DIRT,
	AGPD_FACTORS_TYPE_PRICE,
	AGPD_FACTORS_TYPE_OWNER,
	AGPD_FACTORS_TYPE_AGRO,
	AGPD_FACTORS_MAX_TYPE
} eAgpdFactorsType;

typedef enum AgpdFactorCharStatusType
{
	AGPD_FACTORS_CHARSTATUS_TYPE_CON = 0,
	AGPD_FACTORS_CHARSTATUS_TYPE_STR,
	AGPD_FACTORS_CHARSTATUS_TYPE_INT,
	AGPD_FACTORS_CHARSTATUS_TYPE_DEX,
	AGPD_FACTORS_CHARSTATUS_TYPE_CHA,
	AGPD_FACTORS_CHARSTATUS_TYPE_LUK,
	AGPD_FACTORS_CHARSTATUS_TYPE_WIS,
	AGPD_FACTORS_CHARSTATUS_TYPE_LEVEL,
	AGPD_FACTORS_CHARSTATUS_TYPE_MOVEMENT,
	AGPD_FACTORS_CHARSTATUS_TYPE_MOVEMENT_FAST,
	AGPD_FACTORS_CHARSTATUS_TYPE_UNION_RANK,	// union rank point
	AGPD_FACTORS_CHARSTATUS_TYPE_MURDERER,		// murderer point
	AGPD_FACTORS_CHARSTATUS_TYPE_MUKZA,			// mukza point
	AGPD_FACTORS_CHARSTATUS_TYPE_BEFORELEVEL ,	// 이전 레벨값..
	AGPD_FACTORS_CHARSTATUS_TYPE_LIMITEDLEVEL ,	// 제한된 레벨
	AGPD_FACTORS_CHARSTATUS_MAX_TYPE
} AgpdFactorCharStatusType;

typedef enum AgpdFactorCharTypeType
{
	AGPD_FACTORS_CHARTYPE_TYPE_RACE = 0,
	AGPD_FACTORS_CHARTYPE_TYPE_GENDER,
	AGPD_FACTORS_CHARTYPE_TYPE_CLASS,
	AGPD_FACTORS_CHARTYPE_MAX_TYPE
} AgpdFactorCharTypeType;

typedef enum AgpdFactorCharPointType
{
	AGPD_FACTORS_CHARPOINT_TYPE_HP = 0,
	AGPD_FACTORS_CHARPOINT_TYPE_MP,
	AGPD_FACTORS_CHARPOINT_TYPE_SP,
	AGPD_FACTORS_CHARPOINT_TYPE_EXP_LOW,
	AGPD_FACTORS_CHARPOINT_TYPE_EXP_HIGH,
	AGPD_FACTORS_CHARPOINT_TYPE_AP,
	AGPD_FACTORS_CHARPOINT_TYPE_MAP,		// MAGIC ATTACK POINT
	AGPD_FACTORS_CHARPOINT_TYPE_MI,			// MAGIC INTENSITY
	AGPD_FACTORS_CHARPOINT_TYPE_AGRO,		// Agro Point
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_NORMAL,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_MAGIC,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_WATER,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_FIRE,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_EARTH,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_AIR,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_POISON,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_LIGHTENING,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_ATTR_ICE,
	AGPD_FACTORS_CHARPOINT_TYPE_BONUS_EXP,
	AGPD_FACTORS_CHARPOINT_TYPE_DMG_HEROIC,
	AGPD_FACTORS_CHARPOINT_MAX_TYPE
} AgpdFactorCharPointType;

typedef enum AgpdFactorCharPointMaxType
{
	AGPD_FACTORS_CHARPOINTMAX_TYPE_HP = 0,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_MP,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_SP,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_EXP_LOW,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_EXP_HIGH,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_AP,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_MAP,		// MAGIC ATTACK POINT
	AGPD_FACTORS_CHARPOINTMAX_TYPE_MI,		// MAGIC INTENSITY
	AGPD_FACTORS_CHARPOINTMAX_TYPE_AR,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_DR,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_MAR,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_MDR,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_BASE_EXP,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_ADD_MAX_HP,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_ADD_MAX_MP,
	AGPD_FACTORS_CHARPOINTMAX_TYPE_ADD_MAX_SP,
	AGPD_FACTORS_CHARPOINTMAX_MAX_TYPE
} AgpdFactorCharPointMaxType;

typedef enum AgpdFactorCharPointRecoveryRateType
{
	AGPD_FACTORS_CHARPOINT_RECOVERY_RATE_TYPE_HP	= 0,
	AGPD_FACTORS_CHARPOINT_RECOVERY_RATE_TYPE_MP,
	AGPD_FACTORS_CHARPOINT_RECOVERY_RATE_TYPE_SP,
	AGPD_FACTORS_CHARPOINT_RECOVERY_RATE_MAX_TYPE
} AgpdFactorCharPointRecoveryRateType;

typedef enum AgpdFactorAttributeType
{
	AGPD_FACTORS_ATTRIBUTE_TYPE_PHYSICAL = 0,
	AGPD_FACTORS_ATTRIBUTE_TYPE_MAGIC,
	AGPD_FACTORS_ATTRIBUTE_TYPE_WATER,
	AGPD_FACTORS_ATTRIBUTE_TYPE_FIRE,
	AGPD_FACTORS_ATTRIBUTE_TYPE_EARTH,
	AGPD_FACTORS_ATTRIBUTE_TYPE_AIR,
	AGPD_FACTORS_ATTRIBUTE_TYPE_POISON,
	AGPD_FACTORS_ATTRIBUTE_TYPE_LIGHTENING,
	AGPD_FACTORS_ATTRIBUTE_TYPE_ICE,
	AGPD_FACTORS_ATTRIBUTE_TYPE_PHYSICAL_BLOCK,		// 방패 불럭을 여기다 저장함. 05.3월초 광준옹.
	AGPD_FACTORS_ATTRIBUTE_TYPE_SKILL_BLOCK,
	AGPD_FACTORS_ATTRIBUTE_TYPE_HEROIC,
	AGPD_FACTORS_ATTRIBUTE_TYPE_HEROIC_MELEE,
	AGPD_FACTORS_ATTRIBUTE_TYPE_HEROIC_RANGE,
	AGPD_FACTORS_ATTRIBUTE_TYPE_HEROIC_MAGIC,
	AGPD_FACTORS_ATTRIBUTE_MAX_TYPE
} AgpdFactorAttributeType;

typedef enum AgpdFactorDamageType
{
	AGPD_FACTORS_DAMAGE_TYPE_MIN = 0,
	AGPD_FACTORS_DAMAGE_TYPE_MAX,
	AGPD_FACTORS_DAMAGE_MAX_TYPE
} AgpdFactorDamageType;

typedef enum AgpdFactorDefenseType
{
	AGPD_FACTORS_DEFENSE_TYPE_DEFENSE_POINT = 0,
	AGPD_FACTORS_DEFENSE_TYPE_DEFENSE_RATE,
	AGPD_FACTORS_DEFENSE_MAX_TYPE
} AgpdFactorDefenseType;

typedef enum AgpdFactorAttackType
{
	AGPD_FACTORS_ATTACK_TYPE_ATTACKRANGE = 0,
	AGPD_FACTORS_ATTACK_TYPE_HITRANGE,
	AGPD_FACTORS_ATTACK_TYPE_SPEED,
	AGPD_FACTORS_ATTACK_TYPE_SKILL_CAST,			// Point 에다가 세팅해서 Percent 처럼 계산한다. 2005.11.23. steeple
	AGPD_FACTORS_ATTACK_TYPE_SKILL_DELAY,			// Point 에다가 세팅해서 Percent 처럼 계산한다. 2005.11.23. steeple
	AGPD_FACTORS_ATTACK_TYPE_HIT_RATE,				// Point 에다가 세팅해서 Percent 처럼 계산한다. 2005.12.21. steeple
	AGPD_FACTORS_ATTACK_TYPE_EVADE_RATE,			// Point 에다가 세팅해서 Percent 처럼 계산한다. 2005.12.21. steeple
	AGPD_FACTORS_ATTACK_TYPE_DODGE_RATE,			// Point 에다가 세팅해서 Percent 처럼 계산한다. 2005.12.21. steeple
	AGPD_FACTORS_ATTACK_MAX_TYPE
} AgpdFactorAttackType;

typedef enum ApgdFactorItemType
{
	AGPD_FACTORS_ITEM_TYPE_DURABILITY = 0,
	AGPD_FACTORS_ITEM_TYPE_HAND,
	AGPD_FACTORS_ITEM_TYPE_RANK,
//	AGPD_FACTORS_ITEM_TYPE_EGO_LEVEL,
//	AGPD_FACTORS_ITEM_TYPE_EGO_MAXLEVEL,
//	AGPD_FACTORS_ITEM_TYPE_EGO_EXP,
//	AGPD_FACTORS_ITEM_TYPE_SOUL_LEVEL,
//	AGPD_FACTORS_ITEM_TYPE_SOUL_RACE,
//	AGPD_FACTORS_ITEM_TYPE_SOULCUBE_LEVEL,
	AGPD_FACTORS_ITEM_TYPE_PHYSICAL_RANK,
	AGPD_FACTORS_ITEM_TYPE_MAX_DURABILITY,
	AGPD_FACTORS_ITEM_TYPE_GACHA,				// 가챠 아이템팩터 추가.
	AGPD_FACTORS_ITEM_MAX_TYPE
} AgpdFactorItemType;

typedef enum AgpdFactorPriceType
{
	AGPD_FACTORS_PRICE_TYPE_NPC_PRICE = 0,
	AGPD_FACTORS_PRICE_TYPE_PC_PRICE,
	AGPD_FACTORS_PRICE_TYPE_MONEY_HIGH,
	AGPD_FACTORS_PRICE_TYPE_MONEY_LOW,
	AGPD_FACTORS_PRICE_MAX_TYPE
} AgpdFactorPriceType;

typedef enum AgpdFactorDIRTType
{
	AGPD_FACTORS_DIRT_TYPE_DURATION = 0,
	AGPD_FACTORS_DIRT_TYPE_INTENSITY,
	AGPD_FACTORS_DIRT_TYPE_RANGE,
	AGPD_FACTORS_DIRT_TYPE_TARGET,
	AGPD_FACTORS_DIRT_TYPE_SKILL_LEVEL,
	AGPD_FACTORS_DIRT_TYPE_SKILL_POINT,
	AGPD_FACTORS_DIRT_TYPE_SKILL_EXP,
	AGPD_FACTORS_DIRT_TYPE_HEROIC_POINT,
	AGPD_FACTORS_DIRT_MAX_TYPE
} AgpdFactorDIRTType;

typedef enum AgpdFactorOwnerType
{
	AGPD_FACTORS_OWNER_TYPE_ID = 0,
	AGPD_FACTORS_OWNER_TYPE_OWNER,
	AGPD_FACTORS_OWNER_MAX_TYPE
} AgpdFactorOwnerType;

typedef enum eAgpdFactorAgroType
{
	AGPD_FACTORS_AGRO_TYPE_STATIC = 0,
	AGPD_FACTORS_AGRO_TYPE_XP_STATIC,
	AGPD_FACTORS_AGRO_TYPE_SLOW,
	AGPD_FACTORS_AGRO_TYPE_FAST,
	AGPD_FACTORS_AGRO_TYPE_AGRO,
	AGPD_FACTORS_AGRO_MAX_TYPE
} AgpdFactorAgroType;

struct AgpdFactorCharStatus 
{
	//INT32	lValue[AGPD_FACTORS_CHARSTATUS_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_CHARSTATUS_MAX_TYPE>	lValue;
};

struct AgpdFactorCharType
{
	//INT32	lValue[AGPD_FACTORS_CHARTYPE_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_CHARTYPE_MAX_TYPE>		lValue;
};

struct AgpdFactorCharPoint
{
	//INT32	lValue[AGPD_FACTORS_CHARPOINT_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_CHARPOINT_MAX_TYPE>		lValue;
};

struct AgpdFactorCharPointMax
{
	//INT32	lValue[AGPD_FACTORS_CHARPOINTMAX_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_CHARPOINTMAX_MAX_TYPE>		lValue;
};

struct AgpdFactorCharPointRecoveryRate
{
	//INT32	lValue[AGPD_FACTORS_CHARPOINT_RECOVERY_RATE_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_CHARPOINT_RECOVERY_RATE_MAX_TYPE>		lValue;
};

struct AgpdFactorAttribute
{
	//INT32	lValue[AGPD_FACTORS_ATTRIBUTE_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_ATTRIBUTE_MAX_TYPE>		lValue;
};

struct AgpdFactorDamage
{
	//AgpdFactorAttribute	csValue[AGPD_FACTORS_DAMAGE_MAX_TYPE];
	ApSafeArray<AgpdFactorAttribute, AGPD_FACTORS_DAMAGE_MAX_TYPE>		csValue;
};

struct AgpdFactorDefense
{
	//AgpdFactorAttribute	csValue[AGPD_FACTORS_DEFENSE_MAX_TYPE];
	ApSafeArray<AgpdFactorAttribute, AGPD_FACTORS_DEFENSE_MAX_TYPE>		csValue;
};

struct AgpdFactorAttack
{
	//INT32	lValue[AGPD_FACTORS_ATTACK_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_ATTACK_MAX_TYPE>		lValue;
};

struct AgpdFactorItem
{
	//INT32	lValue[AGPD_FACTORS_ITEM_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_ITEM_MAX_TYPE>		lValue;
};

struct AgpdFactorPrice
{
	//INT32	lValue[AGPD_FACTORS_PRICE_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_PRICE_MAX_TYPE>		lValue;
};

struct AgpdFactorDIRT
{
	//INT32	lValue[AGPD_FACTORS_DIRT_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_DIRT_MAX_TYPE>		lValue;
};

struct AgpdFactorOwner
{
	//INT32	lValue[AGPD_FACTORS_OWNER_MAX_TYPE];
	ApSafeArray<INT_PTR, AGPD_FACTORS_OWNER_MAX_TYPE>	lValue;
};

struct AgpdFactorAgro
{
	//INT32	lValue[AGPD_FACTORS_AGRO_MAX_TYPE];
	ApSafeArray<INT32, AGPD_FACTORS_AGRO_MAX_TYPE>		lValue;
};

class AgpdFactor
{
public:
	AgpdFactor();
	virtual ~AgpdFactor();

	BOOL	m_bPoint;			// 이 펙터에 저장되는 값이 point 인지, % 인지를 나타낸다. (TRUE 면 point)

public:
	//VOID	*m_pvFactor[AGPD_FACTORS_MAX_TYPE];
	ApSafeArray<PVOID, AGPD_FACTORS_MAX_TYPE>		m_pvFactor;
};

typedef struct AgpdFactorDetail
{
	eAgpdFactorsType	eFactorType;		// AGPD_FACTORS_TYPE_NONE if INT32, else eAgpdFactorsType
	INT32				lNumber;
} AgpdFactorDetail;


#endif //_AGPDFACTORS_H_
